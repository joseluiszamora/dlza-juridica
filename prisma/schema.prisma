generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Usuario {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String
  nombres   String
  apellidos String
  documento String
  imagenUrl String?
  createdAt DateTime @default(now())
  area      String?
  cargo     String?
  role      String   @default("user")
  activo    Boolean  @default(true)
}

model Contract {
  title      String
  object     String
  desc       String
  content    String
  dateStart  DateTime @default(now())
  dateEnd    DateTime @default(now())
  ammount    Float
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  status     String   @default("Active")
  bajaLogica Boolean  @default(false)
}

model Agencia {
  id                             Int               @id @default(autoincrement())
  created_at                     DateTime          @default(now()) @db.Timestamptz(6)
  nombre                         String?           @default("")
  agenteNombre                   String?           @default("")
  direccion                      String?           @default("")
  latitud                        Float?            @db.Real
  longitud                       Float?            @db.Real
  licenciaDeFuncionamiento       Boolean?
  vigenciaLicenciaFuncionamiento DateTime?         @db.Date
  nitAgencia                     String?
  tipoGarantia                   String?
  montoGarantia                  Float?            @db.Real
  testimonioNotarial             String?
  contratoAlquiler               String?
  contratoAgenciaInicio          DateTime?         @db.Date
  contratoAgenciaFin             DateTime?         @db.Date
  observaciones                  String?
  agenteId                       Int               @default(1)
  ciudadId                       Int               @default(1)
  agente                         Agente            @relation(fields: [agenteId], references: [id])
  ciudad                         Ciudad            @relation(fields: [ciudadId], references: [id])
  contratos                      ContratoAgencia[]
}

model ContratoAgencia {
  id                    Int       @id @default(autoincrement())
  codigoContrato        String
  contratoAgenciaInicio DateTime? @db.Date
  contratoAgenciaFin    DateTime? @db.Date
  tipoGarantia          String?
  montoGarantia         Float?    @db.Real
  testimonioNotarial    String?
  estado                String?   @default("vigente")
  observaciones         String?
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  agenciaId             Int
  agencia               Agencia   @relation(fields: [agenciaId], references: [id])
}

model Agente {
  id                      Int       @id @default(autoincrement())
  nombres                 String
  apellidos               String
  documento               String
  expedido                String
  fechaNacimiento         DateTime  @db.Date
  genero                  String
  direccion               String?   @default("")
  telefono                String?   @default("")
  celular                 String
  email                   String?   @default("")
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  activo                  Boolean?  @default(true)
  imagenUrl               String?
  documentoCi             Boolean?  @default(false)
  documentoCroquis        Boolean?  @default(false)
  documentoServicioBasico Boolean?  @default(false)
  agencias                Agencia[]
}

model Ciudad {
  id        Int        @id @default(autoincrement())
  nombre    String
  pais      String     @default("Bolivia")
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  agencias  Agencia[]
  empleados Empleado[]
}

model Empleado {
  id                    Int      @id @default(autoincrement())
  nombres               String
  apellidos             String
  documento             String
  tipoDocumento         String   @default("CI")
  fechaNacimiento       DateTime @db.Date
  genero                String?
  codigoSap             String?
  fechaIngreso          DateTime @db.Date
  activo                Boolean  @default(true)
  telefono              String?
  email                 String?
  direccion             String?
  imagenUrl             String?
  salario               Int      @default(0)
  vacacionesDisponibles Int      @default(0)
  cargo                 String
  areaId                Int
  createdAt             DateTime @default(now()) @db.Timestamptz(6)
  ciudadId              Int
  area                  Area     @relation(fields: [areaId], references: [id])
  ciudad                Ciudad   @relation(fields: [ciudadId], references: [id])
}

model Area {
  id           Int        @id @default(autoincrement())
  nombre       String
  departamento String?
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  empleados    Empleado[]
}

model Marca {
  id                      Int       @id @default(autoincrement())
  nombre                  String
  estado                  String    @default("renovada")
  logotipoUrl             String?
  genero                  String
  tipo                    String
  claseNiza               String
  numeroRegistro          String
  fechaRegistro           DateTime  @db.Date
  tramiteArealizar        String?
  fechaExpiracionRegistro DateTime?
  fechaLimiteRenovacion   DateTime?
  titular                 String
  apoderado               String
  createdAt               DateTime  @default(now()) @db.Timestamptz(6)
}

model RenovacionMarca {
  id                  Int       @id @default(autoincrement())
  estadoRenovacion    String    @default("renovada")
  numeroDeRenovacion  String?
  fechaParaRenovacion DateTime?
  numeroDeSolicitud   String
  titular             String
  apoderado           String
  procesoSeguidoPor   String?
  createdAt           DateTime  @default(now()) @db.Timestamptz(6)
}
